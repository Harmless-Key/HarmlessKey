{
  "rules": {
    "campaigns": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".indexOn": "private"
      },
      ".read": true
    },
    "users": {
      "$uid": {
        "username": {
          ".write": "$uid === auth.uid || root.child('users').child(auth.uid).child('admin').exists()"
        },
        "email": {
          ".write": "$uid === auth.uid || root.child('users').child(auth.uid).child('admin').exists()"
        },
        "active_campaign": {
          ".write": "$uid === auth.uid || root.child('users').child(auth.uid).child('admin').exists()"
        },
        "admin": {
          ".write": false
        },
        "contribute": {
          ".write": "root.child('users').child(auth.uid).child('admin').exists()"
        },
        "follow": {
          ".write": "$uid === auth.uid"
        },
        "voucher": {
          ".write": "root.child('users').child(auth.uid).child('admin').exists()"
        },
        "patreon_email": {
          ".write": "root.child('users').child(auth.uid).child('admin').exists()"
        },
      },
      ".read": true,
      ".indexOn": [
        "username",
        "email",
        "admin",
        "contribute"
      ]
    },
    "search_users": {
      "$uid": {
        ".write": true
      },
      ".read": true,
      ".indexOn": [
        "username",
        "email"
      ]
    },
    "status": {
      ".write": true,
      ".read": true,
      ".indexOn": "state"
    },
    "posters": {
      ".write": true,
      ".read": true,
    },
    "patrons": {
      ".write": true,
      ".read": true,
      ".indexOn": "email"
    },
    "new_patrons": {
      ".write": true,
      ".read": true,
      ".indexOn": "email"
    },
    "patreon_data": {
      ".write": true,
      ".read": true,
      ".indexOn": "timestamp"
    },
    "tiers": {
      ".write": true,
      ".read": true,
    },
    "settings": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".read": true
      }
    },
    "players": {
      "$uid": {
        "$playerid": {
          ".write": "$uid === auth.uid || root.child('character_control').child(auth.uid).child($playerid).child('user').val() === $uid"
        },
        ".read": true
      }
    },
    "character_control": {
      "$uid": {
        "$playerid": {
          ".write": "data.exists() || newData.child('user').val() === auth.uid"
        },
        ".read": true
      }
    },
    "npcs": {
      "$uid": {
        "$npcId": {
          ".write": "$uid === auth.uid || root.child('character_control').child(auth.uid).child( data.child('player_id').val() ).child('user').val() === $uid",
          ".validate": "newData.hasChildren(['name', 'challenge_rating', 'armor_class', 'hit_points'])",
          "name": {
            ".validate": "newData.isString() && newData.val().length <= 100"
          },
          "source": {
            ".validate": "newData.isString() && newData.val().length <= 15"
          },
          "avatar": {
            ".validate": "newData.isString() && newData.val().length <= 1000"
          },
          "size": {
            ".validate": "newData.isString() && newData.val().length <= 15"
          },
          "type": {
            ".validate": "newData.isString() && newData.val().length <= 25"
          },
          "subtype": {
            ".validate": "newData.isString() && newData.val().length <= 25"
          },
          "alignment": {
            ".validate": "newData.isString() && newData.val().length <= 25"
          },
          "walk_speed": {
            ".validate": "newData.isInteger() && newData.val() <= 999"
          },
          "swim_speed": {
            ".validate": "newData.isInteger() && newData.val() <= 999"
          },
          "fly_speed": {
            ".validate": "newData.isInteger() && newData.val() <= 999"
          },
          "burrow_speed": {
            ".validate": "newData.isInteger() && newData.val() <= 999"
          },
          "climb_speed": {
            ".validate": "newData.isInteger() && newData.val() <= 999"
          },
          "languages": {
          },
          "challenge_rating": {
            ".validate": "newData.isNumber() && newData.val() <= 30"
          },
          "friendly": {
            ".validate": "newData.isBoolean()"
          },
          "armor_class": {
            ".validate": "newData.isInteger() && newData.val() <= 99"
          },
          "hit_points": {
            ".validate": "newData.isInteger() && newData.val() <= 9999"
          },
          "hit_dice": {
            ".validate": "newData.isString() && newData.val().matches(/^[0-9]+d[0-9]+$/) && newData.val().lengh <= 10"
          },
          "senses": {
            "blindsight": {
              "blindsight": {
                ".validate": "newData.isBoolean()"
              },
              "range": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "comments": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              }
            },
            "darkvision": {
              "darkvision": {
                ".validate": "newData.isBoolean()"
              },
              "range": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "comments": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              }
            },
            "tremorsense": {
              "tremorsense": {
                ".validate": "newData.isBoolean()"
              },
              "range": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "comments": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              }
            },
            "truesight": {
              "truesight": {
                ".validate": "newData.isBoolean()"
              },
              "range": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "comments": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              }
            }
          },
          "strength": {
            ".validate": "newData.isInteger() && newData.val() <= 99"
          },
          "dexterity": {
            ".validate": "newData.isInteger() && newData.val() <= 99"
          },
          "constitution": {
            ".validate": "newData.isInteger() && newData.val() <= 99"
          },
          "intelligence": {
            ".validate": "newData.isInteger() && newData.val() <= 99"
          },
          "wisdom": {
            ".validate": "newData.isInteger() && newData.val() <= 99"
          },
          "charisma": {
            ".validate": "newData.isInteger() && newData.val() <= 99"
          },
          "saving_throws": {
          },
          "skills": {
          },
          "skills_expertise": {
          },
          "skill_modifiers": {
            "acrobatics": "newData.isInteger() && newData.val() <= 99",
            "animal Handling": "newData.isInteger() && newData.val() <= 99",
            "arcana": "newData.isInteger() && newData.val() <= 99",
            "athletics": "newData.isInteger() && newData.val() <= 99",
            "deception": "newData.isInteger() && newData.val() <= 99",
            "history": "newData.isInteger() && newData.val() <= 99",
            "insight": "newData.isInteger() && newData.val() <= 99",
            "intimidation": "newData.isInteger() && newData.val() <= 99",
            "investigation": "newData.isInteger() && newData.val() <= 99",
            "medicine": "newData.isInteger() && newData.val() <= 99",
            "nature": "newData.isInteger() && newData.val() <= 99",
            "perception": "newData.isInteger() && newData.val() <= 99",
            "performance": "newData.isInteger() && newData.val() <= 99",
            "persuasion": "newData.isInteger() && newData.val() <= 99",
            "religion": "newData.isInteger() && newData.val() <= 99",
            "sleight of Hand": "newData.isInteger() && newData.val() <= 99",
            "stealth": "newData.isInteger() && newData.val() <= 99",
            "survival": "newData.isInteger() && newData.val() <= 99"
          }
        
        },
        ".write": "root.child('users').child(auth.uid).child('admin').exists()",
        ".read": true,
      }
    },
    "custom_items": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".read": true
      }
    },
    "encounters": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".read": true,
        // Allow all to write to requests
        "$campaignId": {
          "$encounterId": {
            "requests": {
              ".write": true
            }
          }
        }
      }
    },
    "meters": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".read": true
      }
    },
    "track": {
      "$uid": {
        ".write": true,
      },
      ".read": true
    },
    "broadcast": {
      "$uid": {
        ".write": "$uid === auth.uid",
      },
      ".read": true
    },
    "conditions": {
      ".write": false,
      ".read": true
    },
    "items": {
      ".write": false,
      ".read": true
    },
    "abilities": {
      ".write": false,
      ".read": true
    },
    "monsters": {
      ".write": "root.child('users').child(auth.uid).child('admin').exists() || root.child('users').child(auth.uid).child('contribute').exists()",
      ".read": true,
      ".indexOn": "metadata/tagged"
    },
    "new_monsters": {
      ".write": "root.child('users').child(auth.uid).child('admin').exists() || root.child('users').child(auth.uid).child('contribute').exists()",
      ".read": true,
      ".indexOn": [
        "metadata/tagged",
        "metadata/finished"
      ]
    },
    "spells": {
      ".write": "root.child('users').child(auth.uid).child('admin').exists() || root.child('users').child(auth.uid).child('contribute').exists()",
      ".read": true,
      ".indexOn": [
        "metadata/tagged",
        "name"
      ]
    },
    "new_spells": {
      ".write": "root.child('users').child(auth.uid).child('admin').exists() || root.child('users').child(auth.uid).child('contribute').exists()",
      ".read": true,
      ".indexOn": [
        "metadata/tagged",
        "metadata/finished"
      ]
    },
    "challenge": {
      ".write": false,
      ".read": true
    },
    "reminders": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".read": true
      }
    }
  }
}