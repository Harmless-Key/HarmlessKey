{
  "rules": {
    "campaigns": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".indexOn": "private"
      },
      ".read": true
    },
    "users": {
      "$uid": {
        "username": {
          ".write": "$uid === auth.uid || root.child('users').child(auth.uid).child('admin').exists()"
        },
        "email": {
          ".write": "$uid === auth.uid || root.child('users').child(auth.uid).child('admin').exists()"
        },
        "active_campaign": {
          ".write": "$uid === auth.uid || root.child('users').child(auth.uid).child('admin').exists()"
        },
        "admin": {
          ".write": false
        },
        "contribute": {
          ".write": "root.child('users').child(auth.uid).child('admin').exists()"
        },
        "follow": {
          ".write": "$uid === auth.uid"
        },
        "voucher": {
          ".write": "root.child('users').child(auth.uid).child('admin').exists()"
        },
        "patreon_email": {
          ".write": "root.child('users').child(auth.uid).child('admin').exists()"
        },
      },
      ".read": true,
      ".indexOn": ["username", "email", "admin", "contribute"]
    },
    "search_users": {
      "$uid": {
        ".write": true
      },
      ".read": true,
      ".indexOn": ["username", "email"]
    },
    "status": {
      ".write": true,
      ".read": true,
      ".indexOn": "state"
    },
    "posters": {
      ".write": true,
      ".read": true,
  	},
    "patrons": {
      ".write": true,
      ".read": true,
      ".indexOn": "email"
    },
    "new_patrons": {
      ".write": true,
      ".read": true,
      ".indexOn": "email"
    },
    "patreon_data": {
      ".write": true,
      ".read": true,
      ".indexOn": "timestamp"
    },
    "tiers": {
      ".write": true,
      ".read": true,
    },
    "settings": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".read": true
      }
    },
    "players": {
      "$uid": {
        "$playerid": {
          	".write": "
              $uid === auth.uid || 
              root.child('character_control').child(auth.uid).child($playerid).child('user').val() === $uid
       			"
        }, 
        ".read": true
      }
    },
    "characters_computed": {
      "$uid": {
        "$characterId": {
          	".write": "
              $uid === auth.uid || 
              root.child('character_control').child(auth.uid).child($characterId).child('user').val() === $uid
       			"
        }, 
        ".read": true
      }
    },
    "characters_base": {
      "$uid": {
        "$characterId": {
          	".write": "
              $uid === auth.uid || 
              root.child('character_control').child(auth.uid).child($characterId).child('user').val() === $uid
       			"
        }, 
        ".read": true
      }
    },
    "character_control": {
      "$uid": {
        "$playerid": {
        	".write": "data.exists() || newData.child('user').val() === auth.uid"
        },
        ".read": true
      }
    },
    "npcs": {
      "$uid": {
        "$npcId": {
          ".write": "
          	$uid === auth.uid ||
            root.child('character_control').child(auth.uid).child( data.child('player_id').val() ).child('user').val() === $uid
          ",
          ".validate": "newData.hasChildren(['name', 'size', 'type', 'challenge_rating', 'armor_class', 'hit_points', 'strength', 'dexterity', 'constitution', 'intelligence', 'wisdom', 'charisma'])",
          "name": {
            ".validate": "newData.isString() && newData.val().length <= 100"
          },
          "source": {
            ".validate": "newData.isString() && newData.val().length <= 20"
          },
          "avatar": {
            ".validate": "newData.isString() && newData.val().length <= 2000"
          },
          "size": {
            ".validate": "newData.isString() && newData.val().length <= 20"
          },
          "type": {
            ".validate": "newData.isString() && newData.val().length <= 25"
          },
          "subtype": {
            ".validate": "newData.isString() && newData.val().length <= 25"
          },
          "alignment": {
            ".validate": "newData.isString() && newData.val().length <= 25"
          },
          "walk_speed": {
            ".validate": "newData.isNumber() && newData.val() <= 999"
          },
          "swim_speed": {
            ".validate": "newData.isNumber() && newData.val() <= 999"
          },
          "fly_speed": {
            ".validate": "newData.isNumber() && newData.val() <= 999"
          },
          "burrow_speed": {
            ".validate": "newData.isNumber() && newData.val() <= 999"
          },
          "climb_speed": {
            ".validate": "newData.isNumber() && newData.val() <= 999"
          },
          "languages": {
            "$langugeIndex": {
              ".validate": "newData.isString() && newData.val().length <= 25"
            }
          },
          "challenge_rating": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 30"
          },
          "proficiency": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 10"
          },
          "friendly": {
            ".validate": "newData.isBoolean()"
          },
          "armor_class": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 99"
          },
          "hit_points": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 999"
          },
          "hit_dice": {
            ".validate": "newData.isString() && newData.val().matches(/^[0-9]+d[0-9]+$/) && newData.val().length <= 10"
          },
          "senses": {
            "blindsight": {
              "blindsight": {
                ".validate": "newData.isBoolean()"
              },
              "range": {
                ".validate": "newData.isString() && newData.val().length <= 999"
              },
              "comments": {
                ".validate": "newData.isString() && newData.val().length <= 999"
              }
            },
            "darkvision": {
              "darkvision": {
                ".validate": "newData.isBoolean()"
              },
              "range": {
                ".validate": "newData.isString() && newData.val().length <= 999"
              },
              "comments": {
                ".validate": "newData.isString() && newData.val().length <= 999"
              }
            },
            "tremorsense": {
              "tremorsense": {
                ".validate": "newData.isBoolean()"
              },
              "range": {
                ".validate": "newData.isString() && newData.val().length <= 999"
              },
              "comments": {
                ".validate": "newData.isString() && newData.val().length <= 999"
              }
            },
            "truesight": {
              "truesight": {
                ".validate": "newData.isBoolean()"
              },
              "range": {
                ".validate": "newData.isString() && newData.val().length <= 999"
              },
              "comments": {
                ".validate": "newData.isString() && newData.val().length <= 999"
              }
            }
          },
          "strength": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 99"
          },
          "dexterity": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 99"
          },
          "constitution": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 99"
          },
          "intelligence": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 99"
          },
          "wisdom": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 99"
          },
          "charisma": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 99"
          },
          "saving_throws": {
            "$savingIndex": {
              ".validate": "newData.isString() && newData.val().length <= 15"
            }
          },
          "skills": {
            "$skillIndex": {
              ".validate": "newData.isString() && newData.val().length <= 25"
            }
          },
          "skills_expertise": {
            "$skillIndex": {
              ".validate": "newData.isString() && newData.val().length <= 25"
            }
          },
          "skill_modifiers": {
            "acrobatics": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "animal Handling": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "arcana": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "athletics": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "deception": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "history": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "insight": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "intimidation": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "investigation": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "medicine": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "nature": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "perception": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "performance": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "persuasion": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "religion": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "sleight of Hand": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "stealth": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "survival": {
              ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
            },
            "$other": {
              ".validate": false
            }
          },
          "damage_vulnerabilities": {
            "$vulnerabilityIndex": {
              ".validate": "newData.isString() && newData.val().length <= 25"
            }
          },
          "damage_resistances": {
            "$restanceIndex": {
              ".validate": "newData.isString() && newData.val().length <= 25"
            }
          },
          "damage_immunities": {
            "$immunityIndex": {
              ".validate": "newData.isString() && newData.val().length <= 25"
            }
          },
          "condition_immunities": {
            "$conditionImmunityIndex": {
              ".validate": "newData.isString() && newData.val().length <= 25"
            }
          },
          "caster_ability": {},
          "caster_level": {},
          "caster_save_dc": {},
          "caster_spell_attack": {},
          "caster_spell_slots": {},
          "caster_spells": {},
          "innate_ability": {},
          "innate_save_dc": {},
          "innate_spell_attack": {},
          "innate_spell_slots": {},
          "innate_spells": {},
          "special_abilities": {},
          "actions": {
            "$actionIndex": {
              ".validate": "newData.hasChildren(['name'])",
              "name": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "desc": {
                ".validate": "newData.isString() && newData.val().length <= 2000"
              },
              "recharge": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "limit": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "limit_type": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "reach": {
                ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 999"
              },
              "range": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "aoe_type": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "aoe_size": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "versatile": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "versatile_one": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "versatile_two": {
                ".validate": "newData.isString() && newData.val().length <= 100"
              },
              "action_list": {
                "$listIndex": {
                  "type": {
                    ".validate": "newData.isString() && newData.val().length <= 15"
                  },
                  "attack_bonus": {
                    ".validate": "newData.isNumber() && newData.val() >= -10 && newData.val() <= 99"
                  },
                  "save_ability": {
                    ".validate": "newData.isString() && newData.val().length <= 20"
                  },
                  "save_dc": {
                    ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
                  },
                  "rolls": {
                    "$rollIndex": {
                      "damage_type": {
                        ".validate": "newData.isString() && newData.val().length <= 50"
                      },
                      "dice_count": {
                        ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
                      },
                      "dice_type": {
                        ".validate": "newData.isNumber() && newData.val() >= 4 && newData.val() <= 20"
                      },
                      "fixed_val": {
                        ".validate": "newData.isNumber() && newData.val() >= -99 && newData.val() <= 99"
                      },
                      "versatile_damage_type": {
                        ".validate": "newData.isString() && newData.val().length <= 50"
                      },
                      "versatile_dice_count": {
                        ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
                      },
                      "versatile_dice_type": {
                        ".validate": "newData.isNumber() && newData.val() >= 4 && newData.val() <= 20"
                      },
                      "versatile_fixed_val": {
                        ".validate": "newData.isNumber() && newData.val() >= -99 && newData.val() <= 99"
                      },
                      "projectile_count": {
                        ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 99"
                      },
                      "miss_mod": {
                        ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 2"
                      },
                      "save_fail_mod": {
                        ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 2"
                      },
                      "special": {
                        ".validate": "newData.isString() && newData.val().length <= 50"
                      },
                      "$other": {
                        ".validate": false
                      }
                    }
                  },
                  "$other": {
                    ".validate": false
                  }
                }
              },
              "$other": {
                ".validate": false
              }
            }
          },
          "legendary_count": {
            ".validate": "newData.isNumber() && newData.val() >= 1 && newData.val() <= 9"
          },
          "legendary_actions": {},
          "reactions": {},
          "$other": {
            ".validate": false
          }

        },
        ".write": "root.child('users').child(auth.uid).child('admin').exists()",
        ".read": true
      }
    },
    "custom_items": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".read": true
      }
    },
    "encounters": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".read": true,
          
        // Allow all to write to requests
        "$campaignId": {
          "$encounterId": {
            "requests": {
              ".write": true
            }
          }
        }
      }
    },
		"meters": {
      "$uid": {
        ".write": "$uid === auth.uid",
        ".read": true
      }
    },
    "track": {
      "$uid": {
        ".write": true,
      },
        ".read": true
    },
    "broadcast": {
      "$uid": {
        ".write": "$uid === auth.uid",
      },
      ".read": true
    },
    "conditions": {
        ".write": false,
        ".read": true
    },
    "items": {
        ".write": false,
        ".read": true
    },
    "abilities": {
      ".write": false,
      ".read": true
    },
    "monsters": {
      ".write": "root.child('users').child(auth.uid).child('admin').exists() || root.child('users').child(auth.uid).child('contribute').exists()",
      ".read": true,
      ".indexOn": "metadata/tagged"
    },
    "new_monsters": {
      ".write": "root.child('users').child(auth.uid).child('admin').exists() || root.child('users').child(auth.uid).child('contribute').exists()",
      ".read": true,
      ".indexOn": ["metadata/tagged", "metadata/finished"]
    },
    "spells": {
      ".write": "root.child('users').child(auth.uid).child('admin').exists() || root.child('users').child(auth.uid).child('contribute').exists()",
      ".read": true,
      ".indexOn": ["metadata/tagged", "name"]
    },
    "new_spells": {
      ".write": "root.child('users').child(auth.uid).child('admin').exists() || root.child('users').child(auth.uid).child('contribute').exists()",
      ".read": true,
      ".indexOn": ["metadata/tagged", "metadata/finished"]
    },
    "challenge": {
      ".write": false,
      ".read": true
    },
    "reminders": {
      "$uid": {
        ".write": "$uid === auth.uid",  
        ".read": true
      }
  	}
  }
}